var iotb = require('iotb');
var webpushkeys=require('./webpushkeys.json');

var iotbapp=iotb({
  port:8081, // optional edit
  publichost:"localhost:8081", // edit, required for e.g. links in emails; e.g. iotbroker.xyz  
  systemadministrator:"iotadmin - <yourmail>", //edit
  defaultadmin:{
    user: "iotadmin",                     // edit
    username: "IoT Broker Administrator", // edit
    password: "<yourpwd>",                // edit
    email: "<yourmail>"                   // edit
  },
  dbfile:"./db/iot.db",       
  webpush:{
    // copy content from keys.txt generated by web-push
    publickey: webpushkeys.publicKey,
    privatekey: webpushkeys.privateKey,
    email: "<yourmail>" // edit
  },
/*  
  email:{
    type:"microsoft",
    username:"<yourmail>", // edit
    password:"<password>", // edit
    scopes: [
        //"https://outlook.office.com/IMAP.AccessAsUser.All",
        //"https://outlook.office.com/POP.AccessAsUser.All",
        "https://outlook.office.com/SMTP.Send"
        //"offline_access"
    ],
    auth: {
        clientId: 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx', // edit
        authority: 'https://login.microsoftonline.com/yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy/v2.0', // edit
    }
  },  
*/  
  limits:{  // default settings, can be changed
    zipfileupload_mb:5,
    websitetotalsize_mb:10,
    websocketvaluesize:2000, // if value-size exceeds, received package is ignored
    httpvaluesize:4000 // if value-size exceeds, received package is ignored
  }
});

var app=iotbapp.express;

iotbapp.run().then(()=>{
  console.log("IoT Broker listening on port "+iotbapp.config.port);
  let events = [
    {name: 'beforeExit', exitCode: 0 },
    {name: 'uncaughtExecption', exitCode: 1 },
    {name: 'SIGINT', exitCode: 130 },
    {name: 'SIGTERM', exitCode: 143 }
  ];

  events.forEach((e) => {
    process.on(e.name,  () => {
    iotbapp.stop()
      .then(() => { 
        console.log('connection cleaned');
        process.exit(e.exitCode);
      })
      .catch((err) => {
        console.error(err);
        process.exit(1);
      })    
    })
  });
}).catch((e)=>{
  console.log("Error loading IoT Broker");
});